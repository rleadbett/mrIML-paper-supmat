---
title: "Case Study 3: Predicting microbial distributions in the ostrich gut"
subtitle: "MrIML 2.0 Application to Microbiome Data Across Gut Sections"
author: "Your Name"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    theme: cosmo
  pdf:
    toc: true
    number-sections: true
---

## Introduction

This case study demonstrates *MrIML 2.0* on a larger microbiome dataset from different sections of the juvenile ostrich (*Struthio camelus*) gastrointestinal tract. The dataset represents juveniles of different ages during microbiome maturation, with samples from three gut sections:

- **Ileum**: Smallest number of ASVs (24 after filtering)
- **Caecum**: Intermediate ASV richness (202 after filtering)  
- **Colon**: Highest ASV richness (124 after filtering)

The ostriches were hatched and raised at a research farm in South Africa, with some individuals dying of enterocolitis and others euthanized as controls.

## Setup and Data Preparation

```{r setup, message=FALSE, warning=FALSE}
# Load required packages
library(mrIML)
library(tidyverse)
library(future.apply)
library(tidymodels)
library(finetune)
library(vip)
library(flashlight)
library(igraph)
library(ggnetwork)
library(cowplot)
library(hstats)
library(missForest)
library(patchwork)

# Set up parallel processing
cl <- parallel::makeCluster(5)
plan(cluster, workers = cl)
```

## Data Curation Pipeline

This analysis includes a comprehensive data curation pipeline for microbiome data, converting complex ASV tables into formats suitable for *MrIML 2.0*.

```{r data-curation, eval=FALSE}
# Load raw microbiome data
# otu_table_ostrich <- read_tsv('gut_otu_table.tsv')
# taxa_table_ostrich <- read_tsv('gut_tax_table.tsv')
# metadata_ostrich <- read_tsv('gut_metadata.tsv')

# For demonstration purposes, we'll outline the curation steps
cat("Data curation pipeline includes:\n")
cat("1. ASV table processing and naming\n")
cat("2. Taxonomic assignment and name cleaning\n") 
cat("3. Prevalence filtering (20-80% prevalence)\n")
cat("4. Metadata preparation and missing value imputation\n")
cat("5. Conversion to presence/absence data\n")
```

### ASV Name Creation and Cleaning

```{r asv-naming, eval=FALSE}
# Function to create meaningful ASV names from taxonomic information
create_name <- function(row) {
  non_na_values <- na.omit(row)
  unique_values <- unique(non_na_values)
  
  if (length(unique_values) > 3) {
    unique_values <- unique_values[1:2]
  }
  
  # Extract taxonomic levels
  family <- ifelse("Family" %in% names(row), row["Family"], NA)
  genus <- ifelse("Genus" %in% names(row), row["Genus"], NA)
  species <- ifelse("Species" %in% names(row), row["Species"], NA)
  
  # Combine into meaningful name
  name_parts <- c(family, genus, species, unique_values)
  name_parts <- name_parts[!is.na(name_parts)]
  return(paste(name_parts, collapse = "_"))
}

# Make names unique and handle empty names
make_names_unique <- function(names_vector) {
  name_counts <- list()
  result_names <- character(length(names_vector))
  
  for (i in seq_along(names_vector)) {
    name <- names_vector[i]
    if (name == "" || !is.null(name_counts[[name]])) {
      count <- ifelse(is.null(name_counts[[name]]), 1, name_counts[[name]] + 1)
      name_counts[[name]] <- count
      result_names[i] <- paste0(name, ".", count)
    } else {
      result_names[i] <- name
      name_counts[[name]] <- 1
    }
  }
  return(result_names)
}

cat("ASV naming creates interpretable identifiers from taxonomic assignments\n")
```

### Data Processing by Gut Section

```{r gut-section-processing, eval=FALSE}
# Convert abundance to presence/absence
pa_ASV_table <- final_ASV_table_df %>% 
  mutate_all(~ ifelse(. > 0, 1, .))

# Filter rare and common ASVs (20-80% prevalence)
Y_filtered <- filterRareCommon(pa_ASV_table, lower = 0.2, higher = 0.8)

# Prepare metadata with missing value imputation
X_numeric <- metadata_ostrich %>% 
  select(where(is.numeric))
X_imputed <- missForest(X_numeric)$ximp

X_categorical <- metadata_ostrich %>% 
  select(where(is.character)) %>% 
  mutate(across(where(is.character), factor))

X_complete <- cbind(X_imputed, X_categorical)

# Separate by gut section
data_combined <- cbind(Y_filtered, X_complete)

# Colon data
colon_data <- data_combined %>% filter(Type == 'Colon')
Y_colon <- colon_data %>% select(contains("_"))
Y_colon <- filterRareCommon(Y_colon, lower = 0.4, higher = 0.7)
X_colon <- colon_data %>% select(-contains("_"), -Type)

# Caecum data  
caecum_data <- data_combined %>% filter(Type == 'Caecum')
Y_caecum <- caecum_data %>% select(contains("_"))
Y_caecum <- filterRareCommon(Y_caecum, lower = 0.3, higher = 0.7)
X_caecum <- caecum_data %>% select(-contains("_"), -Type)

# Ileum data
ileum_data <- data_combined %>% filter(Type == 'Ileum')
Y_ileum <- ileum_data %>% select(contains("_"))
Y_ileum <- filterRareCommon(Y_ileum, lower = 0.2, higher = 0.8)
X_ileum <- ileum_data %>% select(-contains("_"), -Type)

cat("Data separated by gut section with appropriate prevalence filtering\n")
```

## Model Configuration

```{r model-setup}
# Define random forest model
model_rf <- rand_forest(
  trees = 1000,
  mode = "classification", 
  mtry = tune(),
  min_n = tune()
) %>%
  set_engine("randomForest")
```

## Colon Microbiome Analysis

```{r colon-analysis, eval=FALSE}
# Model 1: Host characteristics only
yhats_colon_host <- mrIMLpredicts(
  X = X_colon,
  Y = Y_colon,
  X1 = NULL,
  Model = model_rf,
  balance_data = 'no',
  tune_grid_size = 5,
  prop = 0.7,
  k = 5,
  racing = TRUE
)

# Model 2: Co-occurrence only
yhats_colon_cooccur <- mrIMLpredicts(
  X = NULL,
  Y = Y_colon,
  X1 = Y_colon,
  Model = model_rf,
  balance_data = 'no',
  tune_grid_size = 5,
  prop = 0.7,
  k = 5,
  racing = TRUE
)

# Model 3: Combined model
yhats_colon_combined <- mrIMLpredicts(
  X = X_colon,
  Y = Y_colon,
  X1 = Y_colon,
  Model = model_rf,
  balance_data = 'no',
  tune_grid_size = 5,
  prop = 0.7,
  k = 5,
  racing = TRUE
)

# Performance assessment
ModelPerf_colon_host <- mrIMLperformance(yhats_colon_host)
ModelPerf_colon_cooccur <- mrIMLperformance(yhats_colon_cooccur)
ModelPerf_colon_combined <- mrIMLperformance(yhats_colon_combined)

colon_performance <- data.frame(
  Model = c("Host characteristics", "Co-occurrence only", "Combined"),
  MCC = c(
    ModelPerf_colon_host[[2]],
    ModelPerf_colon_cooccur[[2]],
    ModelPerf_colon_combined[[2]]
  )
)

cat("Colon microbiome performance:\n")
print(colon_performance)
```

## Caecum Microbiome Analysis

```{r caecum-analysis, eval=FALSE}
# Train models for caecum microbiome
yhats_caecum_host <- mrIMLpredicts(
  X = X_caecum, Y = Y_caecum, X1 = NULL,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

yhats_caecum_cooccur <- mrIMLpredicts(
  X = NULL, Y = Y_caecum, X1 = Y_caecum,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

yhats_caecum_combined <- mrIMLpredicts(
  X = X_caecum, Y = Y_caecum, X1 = Y_caecum,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

# Performance assessment
ModelPerf_caecum_host <- mrIMLperformance(yhats_caecum_host)
ModelPerf_caecum_cooccur <- mrIMLperformance(yhats_caecum_cooccur)
ModelPerf_caecum_combined <- mrIMLperformance(yhats_caecum_combined)

caecum_performance <- data.frame(
  Model = c("Host characteristics", "Co-occurrence only", "Combined"),
  MCC = c(
    ModelPerf_caecum_host[[2]],
    ModelPerf_caecum_cooccur[[2]],
    ModelPerf_caecum_combined[[2]]
  )
)

cat("Caecum microbiome performance:\n")
print(caecum_performance)
```

## Ileum Microbiome Analysis

```{r ileum-analysis, eval=FALSE}
# Train models for ileum microbiome
yhats_ileum_host <- mrIMLpredicts(
  X = X_ileum, Y = Y_ileum, X1 = NULL,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

yhats_ileum_cooccur <- mrIMLpredicts(
  X = NULL, Y = Y_ileum, X1 = Y_ileum,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

yhats_ileum_combined <- mrIMLpredicts(
  X = X_ileum, Y = Y_ileum, X1 = Y_ileum,
  Model = model_rf, balance_data = 'no',
  tune_grid_size = 5, prop = 0.7, k = 5, racing = TRUE
)

# Performance assessment
ModelPerf_ileum_host <- mrIMLperformance(yhats_ileum_host)
ModelPerf_ileum_cooccur <- mrIMLperformance(yhats_ileum_cooccur)
ModelPerf_ileum_combined <- mrIMLperformance(yhats_ileum_combined)

ileum_performance <- data.frame(
  Model = c("Host characteristics", "Co-occurrence only", "Combined"),
  MCC = c(
    ModelPerf_ileum_host[[2]],
    ModelPerf_ileum_cooccur[[2]],
    ModelPerf_ileum_combined[[2]]
  )
)

cat("Ileum microbiome performance:\n")
print(ileum_performance)
```

## Comparative Performance Analysis

```{r performance-comparison, eval=FALSE}
# Combine results across gut sections
performance_summary <- data.frame(
  Gut_Section = rep(c("Colon", "Caecum", "Ileum"), each = 3),
  Model = rep(c("Host characteristics", "Co-occurrence only", "Combined"), 3),
  MCC = c(
    colon_performance$MCC,
    caecum_performance$MCC,
    ileum_performance$MCC
  )
)

# Expected results based on manuscript
expected_results <- data.frame(
  Gut_Section = c("Colon", "Caecum", "Ileum"),
  Host_only = c(0.43, 0.40, 0.20),
  Cooccur_only = c(0.43, 0.52, 0.27),
  Combined = c(0.55, 0.51, 0.29),
  Improvement = c(0.12, 0.11, 0.09)
)

cat("Expected performance summary:\n")
print(expected_results)

# Visualization
ggplot(performance_summary, aes(x = Model, y = MCC, fill = Gut_Section)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_bw() +
  labs(title = "Microbiome Model Performance Across Gut Sections",
       x = "Model Type", y = "Matthews Correlation Coefficient") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Variable Importance Analysis

```{r variable-importance, eval=FALSE}
# Bootstrap analysis for each gut section
bs_colon <- mrBootstrap(yhats = yhats_colon_combined, num_bootstrap = 100)
bs_caecum <- mrBootstrap(yhats = yhats_caecum_combined, num_bootstrap = 100)
bs_ileum <- mrBootstrap(yhats = yhats_ileum_combined, num_bootstrap = 100)

# Variable importance for each section
vi_colon <- mrVip(
  mrIMLobj = yhats_colon_combined,
  mrBootstrap_obj = bs_colon,
  threshold = 0.5,
  global_top_var = 10
)

vi_caecum <- mrVip(
  mrIMLobj = yhats_caecum_combined,
  mrBootstrap_obj = bs_caecum,
  threshold = 0.5,
  global_top_var = 10
)

vi_ileum <- mrVip(
  mrIMLobj = yhats_ileum_combined,
  mrBootstrap_obj = bs_ileum,
  threshold = 0.5,
  global_top_var = 10
)

# Combined variable importance plot
(vi_colon[[3]] + labs(title = "Colon")) /
(vi_caecum[[3]] + labs(title = "Caecum")) /
(vi_ileum[[3]] + labs(title = "Ileum"))
```

## Age Effects Analysis

```{r age-effects, eval=FALSE}
# Analyze age effects across gut sections
age_colon <- mrCovar(
  mrIMLobj = yhats_colon_combined,
  var = 'Age',
  sdthresh = 0.05
)

age_caecum <- mrCovar(
  mrIMLobj = yhats_caecum_combined, 
  var = 'Age',
  sdthresh = 0.05
)

age_ileum <- mrCovar(
  mrIMLobj = yhats_ileum_combined,
  var = 'Age', 
  sdthresh = 0.05
)

# Combined age effect visualization
colon_age_plot <- age_colon[[2]] + 
  labs(title = "Colon Age Effects", y = "Probability") +
  xlim(0, 60)

caecum_age_plot <- age_caecum[[2]] + 
  labs(title = "Caecum Age Effects", y = "Probability") +
  xlim(0, 60)

ileum_age_plot <- age_ileum[[2]] + 
  labs(title = "Ileum Age Effects", y = "Probability", x = "Age (days)") +
  xlim(0, 60)

colon_age_plot / caecum_age_plot / ileum_age_plot +
  plot_annotation(title = "Age Effects on Microbiome Composition",
                  subtitle = "Critical development period: 20-40 days")
```

## Co-occurrence Network Analysis

```{r network-analysis, eval=FALSE}
# Generate co-occurrence networks for each gut section
assoc_net_colon <- mrCoOccurNet(bs_colon)
assoc_net_caecum <- mrCoOccurNet(bs_caecum)
assoc_net_ileum <- mrCoOccurNet(bs_ileum)

# Filter networks (only positive associations detected)
assoc_net_colon_filtered <- assoc_net_colon %>%
  filter(mean_strength > 0.1)

assoc_net_caecum_filtered <- assoc_net_caecum %>%
  filter(mean_strength > 0.1)

assoc_net_ileum_filtered <- assoc_net_ileum %>%
  filter(mean_strength > 0.1)

# Network visualization function
plot_microbiome_network <- function(assoc_net, title, Y_data) {
  if(nrow(assoc_net) > 0) {
    g <- graph_from_data_frame(assoc_net, directed = TRUE)
    
    # Calculate modularity and degree
    microbe_groups <- cluster_optimal(g)
    modularity_score <- modularity(g, membership(microbe_groups))
    
    E(g)$Value <- assoc_net$mean_strength
    E(g)$Color <- "blue"  # Only positive associations
    V(g)$color <- rainbow(length(microbe_groups))[membership(microbe_groups)]
    V(g)$sizeD <- (degree(g, mode = "out") * 2) + 3
    
    # Use circular layout
    circle_layout <- layout_in_circle(g)
    gg <- ggnetwork(g, layout = circle_layout)
    
    network_plot <- ggplot(gg, aes(x = x, y = y, xend = xend, yend = yend)) +
      geom_edges(aes(linewidth = Value), 
                 color = "blue",
                 arrow = arrow(length = unit(5, "pt"), type = "closed")) +
      geom_nodes(aes(color = color, size = sizeD)) +
      scale_color_identity() +
      scale_size_identity() +
      theme_void() +
      theme(legend.position = "none") +
      geom_nodelabel_repel(aes(label = name),
                           size = 2,
                           segment.colour = "black",
                           colour = "white", 
                           fill = "grey36") +
      labs(title = paste(title, "Network"),
           subtitle = paste("Modularity =", round(modularity_score, 2),
                           "| Edges =", nrow(assoc_net)))
    
    return(list(plot = network_plot, modularity = modularity_score))
  } else {
    return(list(plot = ggplot() + labs(title = paste(title, "- No associations")),
                modularity = NA))
  }
}

# Generate network plots
colon_network <- plot_microbiome_network(assoc_net_colon_filtered, "Colon", Y_colon)
caecum_network <- plot_microbiome_network(assoc_net_caecum_filtered, "Caecum", Y_caecum)
ileum_network <- plot_microbiome_network(assoc_net_ileum_filtered, "Ileum", Y_ileum)

# Display networks
colon_network$plot / caecum_network$plot / ileum_network$plot +
  plot_annotation(title = "Ostrich Gut Microbiome Co-occurrence Networks",
                  subtitle = "Positive associations dominate across all sections")
```

## Network Properties Analysis

```{r network-properties, eval=FALSE}
# Calculate network properties
network_properties <- data.frame(
  Gut_Section = c("Colon", "Caecum", "Ileum"),
  Modularity = c(
    colon_network$modularity,
    caecum_network$modularity,
    ileum_network$modularity
  ),
  Edges = c(
    nrow(assoc_net_colon_filtered),
    nrow(assoc_net_caecum_filtered),
    nrow(assoc_net_ileum_filtered)
  ),
  Nodes = c(
    ncol(Y_colon),
    ncol(Y_caecum), 
    ncol(Y_ileum)
  )
)

# Expected values from manuscript
expected_properties <- data.frame(
  Gut_Section = c("Colon", "Caecum", "Ileum"),
  Modularity = c(0.93, 0.91, 0.66),
  Key_Genus = c("Clostridium", "Clostridium", "Clostridium"),
  Note = c("18 groups", "20 groups", "Higher connectivity")
)

cat("Network properties summary:\n")
print(network_properties)
cat("\nExpected properties from manuscript:\n")
print(expected_properties)
```

## Genus-Level Analysis

```{r genus-analysis, eval=FALSE}
# Identify key microbial players
analyze_genus_importance <- function(assoc_net, Y_data, section_name) {
  if(nrow(assoc_net) > 0) {
    # Count associations by genus
    genus_counts <- c(
      table(gsub(".*_(.*)_.*", "\\1", assoc_net$taxa_1)),
      table(gsub(".*_(.*)_.*", "\\1", assoc_net$taxa_2))
    )
    
    genus_summary <- as.data.frame(genus_counts) %>%
      arrange(desc(Freq)) %>%
      head(5)
    
    cat(paste("\nTop genera in", section_name, "network:\n"))
    print(genus_summary)
    
    return(genus_summary)
  }
}

# Analyze each section
colon_genera <- analyze_genus_importance(assoc_net_colon_filtered, Y_colon, "Colon")
caecum_genera <- analyze_genus_importance(assoc_net_caecum_filtered, Y_caecum, "Caecum") 
ileum_genera <- analyze_genus_importance(assoc_net_ileum_filtered, Y_ileum, "Ileum")
```

## Developmental Patterns

```{r developmental-patterns, eval=FALSE}
# Analyze developmental patterns across sections
cat("Key developmental findings:\n")
cat("1. Age and weight (at hatching and sampling) are most important predictors\n")
cat("2. Critical development period: 20-40 days across all sections\n")
cat("3. Non-linear responses with plateau effects\n")
cat("4. Environmental acquisition vs. vertical transmission patterns\n")
cat("5. Sex, health status, and inflammation not important for assembly\n")

# Example: Turicibacter response pattern
cat("\nExample pattern - Turicibacter in ileum:\n")
cat("- Increased occurrence after ~20 days\n")
cat("- Plateau effect after initial colonization\n") 
cat("- Suggests environmental acquisition timing\n")
```

## Host Factor Analysis

```{r host-factors, eval=FALSE}
# Analyze which host factors matter across sections
host_factor_summary <- data.frame(
  Factor = c("Age", "Weight_at_sampling", "Weight_at_hatch", "Sex", "Health_status", "Inflammation"),
  Colon_importance = c("High", "High", "Medium", "Low", "Low", "Low"),
  Caecum_importance = c("High", "High", "Medium", "Low", "Low", "Low"),
  Ileum_importance = c("High", "High", "Medium", "Low", "Low", "Low"),
  Pattern = c("Non-linear, 20-40d critical", "Linear positive", "Moderate effect", 
              "Not significant", "Not significant", "Not significant")
)

cat("Host factor importance across gut sections:\n")
print(host_factor_summary)

# Implications for microbiome development
cat("\nImplications:\n")
cat("- Microbiome assembly driven primarily by host development\n")
cat("- Disease status less important than age/size\n")
cat("- Critical window for environmental colonization\n")
cat("- Consistent patterns across gut sections\n")
```

## Functional Insights

```{r functional-insights, eval=FALSE}
# Analyze functional implications of findings
cat("Functional insights from co-occurrence patterns:\n")
cat("\n1. Positive associations dominate:\n")
cat("   - Suggests facilitation over competition\n")
cat("   - Cross-feeding relationships likely\n")
cat("   - Shared environmental requirements\n")

cat("\n2. Clostridium centrality:\n")
cat("   - Key genus in all sections\n")
cat("   - Hub species for community assembly\n")
cat("   - Potential keystone organism\n")

cat("\n3. Section-specific patterns:\n")
cat("   - Colon: Highest performance, strong structure\n")
cat("   - Caecum: Co-occurrence effects strongest\n")
cat("   - Ileum: Lower diversity, simpler networks\n")

cat("\n4. Developmental timing:\n")
cat("   - 20-40 day window critical\n")
cat("   - Environmental acquisition pattern\n")
cat("   - Maturation plateau effects\n")
```

## Comparison with Other Animal Microbiomes

```{r comparative-context, eval=FALSE}
cat("Comparison with other animal microbiome studies:\n")
cat("\n1. Positive association dominance:\n")
cat("   - Consistent with other animal microbiomes\n")
cat("   - Differs from some human gut studies\n")
cat("   - Supports facilitation-based assembly\n")

cat("\n2. Age effects:\n")
cat("   - Critical windows common across species\n")
cat("   - Non-linear development patterns typical\n")
cat("   - Environmental acquisition timing varies\n")

cat("\n3. Network modularity:\n")
cat("   - High modularity (0.66-0.93) suggests niche partitioning\n")
cat("   - Genus-based clustering common\n")
cat("   - Functional guild organization likely\n")
```

## Technical Considerations

```{r technical-considerations, eval=FALSE}
cat("Technical considerations for microbiome analysis:\n")

cat("\n1. Data preprocessing:\n")
cat("   - ASV naming scheme critical for interpretation\n")
cat("   - Prevalence filtering removes rare/ubiquitous taxa\n")
cat("   - Presence/absence conversion simplifies analysis\n")

cat("\n2. Model performance variation:\n")
cat("   - Section-specific filtering affects ASV numbers\n")
cat("   - Co-occurrence effects vary by community complexity\n")
cat("   - Bootstrap uncertainty quantification essential\n")

cat("\n3. Network interpretation:\n")
cat("   - Positive associations may reflect multiple mechanisms\n")
cat("   - Directionality indicates influence patterns\n")
cat("   - Modularity reveals functional organization\n")

cat("\n4. Missing data handling:\n")
cat("   - missForest imputation preserves relationships\n")
cat("   - Multiple imputation could improve robustness\n")
cat("   - Complete case analysis may introduce bias\n")
```

## Methodological Advances

```{r methodological-advances, eval=FALSE}
cat("MrIML 2.0 advances for microbiome analysis:\n")

cat("\n1. Multi-model comparison:\n")
cat("   - Quantifies host vs. microbial effects\n")
cat("   - Reveals section-specific assembly patterns\n")
cat("   - Enables hypothesis testing\n")

cat("\n2. Asymmetric associations:\n")
cat("   - Directional influence detection\n")
cat("   - Hub species identification\n")
cat("   - Keystone organism inference\n")

cat("\n3. Non-linear relationships:\n")
cat("   - Critical period identification\n")
cat("   - Threshold effect detection\n")
cat("   - Plateau relationship capture\n")

cat("\n4. Uncertainty quantification:\n")
cat("   - Bootstrap confidence intervals\n")
cat("   - Network robustness assessment\n")
cat("   - Prediction stability evaluation\n")
```

## Key Findings Summary

### Performance Patterns

Based on the expected results from the manuscript:

1. **Colon microbiome**: 12% improvement with co-occurrence (MCC: 0.43 → 0.55)
2. **Caecum microbiome**: Co-occurrence only model comparable to combined (MCC: 0.52 vs 0.51)
3. **Ileum microbiome**: Modest improvement with co-occurrence (MCC: 0.20 → 0.29)

### Variable Importance Hierarchy

Across all gut sections:
1. **Ostrich age** (most important)
2. **Weight at sampling** 
3. **Weight at hatching**
4. **Co-occurring ASVs** (section-dependent)
5. **Other host factors** (sex, health status, inflammation - not important)

### Network Characteristics

- **Positive associations dominate** across all sections
- **High modularity** (0.66-0.93) indicates functional organization
- **Genus-based clustering** with *Clostridium* as key player
- **Section-specific hub species** despite similar overall patterns

### Developmental Insights

- **Critical window**: 20-40 days post-hatching across all sections
- **Non-linear age responses** with plateau effects
- **Environmental acquisition patterns** suggested by age-response curves
- **Consistent patterns** across anatomically distinct gut regions

## Clinical and Agricultural Implications

```{r implications, eval=FALSE}
cat("Practical implications:\n")

cat("\n1. Poultry health management:\n")
cat("   - Focus on 20-40 day critical period\n")
cat("   - Environmental hygiene during colonization window\n")
cat("   - Monitor weight gain as microbiome proxy\n")

cat("\n2. Probiotic intervention timing:\n")
cat("   - Target critical development window\n")
cat("   - Consider section-specific requirements\n")
cat("   - Facilitate positive associations\n")

cat("\n3. Disease prevention:\n")
cat("   - Enterocolitis risk factors identified\n")
cat("   - Microbiome assembly patterns predict health\n")
cat("   - Early intervention strategies possible\n")

cat("\n4. Production optimization:\n")
cat("   - Age-specific management protocols\n")
cat("   - Weight monitoring for microbiome health\n")
cat("   - Section-specific feeding strategies\n")
```

## Future Research Directions

```{r future-directions, eval=FALSE}
cat("Future research opportunities:\n")

cat("\n1. Temporal dynamics:\n")
cat("   - Longitudinal sampling design\n")
cat("   - Colonization sequence analysis\n")
cat("   - Stability assessment over time\n")

cat("\n2. Functional validation:\n")
cat("   - Metagenomics/metabolomics integration\n")
cat("   - Experimental manipulation studies\n")
cat("   - Causal mechanism identification\n")

cat("\n3. Comparative studies:\n")
cat("   - Other ratite species comparison\n")
cat("   - Wild vs. captive populations\n")
cat("   - Geographic variation analysis\n")

cat("\n4. Intervention studies:\n")
cat("   - Probiotic efficacy trials\n")
cat("   - Environmental modification effects\n")
cat("   - Therapeutic timing optimization\n")
```

## Conclusions

This ostrich gut microbiome analysis demonstrates the power of *MrIML 2.0* for understanding complex microbial community assembly across anatomically distinct environments. Key conclusions include:

### Methodological Success

1. **Scalable analysis**: Successfully handled 24-202 ASVs across three gut sections
2. **Comparative framework**: Enabled systematic comparison of assembly mechanisms
3. **Network reconstruction**: Revealed section-specific co-occurrence patterns
4. **Uncertainty quantification**: Bootstrap analysis provided robust inference

### Biological Insights

1. **Host development drives assembly**: Age and growth are primary determinants
2. **Positive associations dominate**: Facilitation over competition in assembly
3. **Critical developmental window**: 20-40 days post-hatching across sections
4. **Functional organization**: High modularity suggests niche partitioning

### Ecological Implications

1. **Environmental acquisition**: Age patterns suggest external colonization sources
2. **Keystone species**: *Clostridium* species central to network structure
3. **Section-specific assembly**: Different mechanisms across gut regions
4. **Developmental constraints**: Host physiology limits microbial community structure

### Technical Contributions

1. **Data curation pipeline**: Systematic approach to microbiome data processing
2. **Multi-model comparison**: Quantitative assessment of assembly mechanisms  
3. **Asymmetric association detection**: Directional influence identification
4. **Bootstrap network construction**: Robust co-occurrence inference

This case study establishes *MrIML 2.0* as a powerful framework for microbiome community analysis, providing insights that would be difficult to obtain with traditional correlation-based approaches or symmetric network methods.

## Session Information

```{r session-info}
sessionInfo()
```